# PowerShell script to initialize Git repositories for SRE Portfolio projects
# Run this script to prepare all projects for GitHub repository setup

Write-Host "üöÄ Setting up Git repositories for SRE Portfolio projects..." -ForegroundColor Green

# Main portfolio repository
Write-Host "üìÅ Initializing main SRE Portfolio repository..." -ForegroundColor Yellow
if (-not (Test-Path ".git")) {
    git init
    Write-Host "‚úÖ Git repository initialized" -ForegroundColor Green
} else {
    Write-Host "‚ÑπÔ∏è Git repository already exists" -ForegroundColor Blue
}

# Create .gitignore for the main repo
Write-Host "üìù Creating .gitignore..." -ForegroundColor Yellow
$gitignore = @"
# Environment files
.env
*.env
.env.local
.env.production

# Logs
*.log
logs/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node_modules
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Virtual environments
venv/
env/
ENV/
env.bak/
venv.bak/

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
terraform.tfvars
*.tfplan

# Docker
.dockerignore

# Kubernetes secrets
*secret*.yaml
*secret*.yml

# Temporary files
tmp/
temp/
*.tmp

# Cloud provider credentials
*credentials*
*keys*
service-account*.json
gcp-*.json
aws-credentials*

# Data directories
data/
volumes/
"@

$gitignore | Out-File -FilePath ".gitignore" -Encoding utf8
Write-Host "‚úÖ .gitignore created" -ForegroundColor Green

# Create individual project git repositories
$projects = @(
    @{
        Name = "prometheus-monitoring-stack"
        Description = "Comprehensive monitoring and alerting system with Prometheus, Grafana, and AlertManager"
    },
    @{
        Name = "terraform-aws-infrastructure"  
        Description = "Infrastructure as Code with Terraform for AWS with security and best practices"
    },
    @{
        Name = "sre-cicd-pipeline"
        Description = "Reliable CI/CD pipeline with SRE principles, testing, and deployment strategies"
    },
    @{
        Name = "incident-response-toolkit"
        Description = "Complete incident management and chaos engineering framework"
    },
    @{
        Name = "log-aggregation-system"
        Description = "Centralized logging solution with ELK stack and real-time analysis"
    },
    @{
        Name = "capacity-planning-system"
        Description = "AI-powered capacity planning and resource optimization system"
    }
)

foreach ($project in $projects) {
    $projectPath = $project.Name
    
    if (Test-Path $projectPath) {
        Write-Host "üìÅ Setting up Git for $($project.Name)..." -ForegroundColor Yellow
        
        Push-Location $projectPath
        
        # Initialize git if not already done
        if (-not (Test-Path ".git")) {
            git init
            Write-Host "‚úÖ Git repository initialized for $($project.Name)" -ForegroundColor Green
        } else {
            Write-Host "‚ÑπÔ∏è Git repository already exists for $($project.Name)" -ForegroundColor Blue
        }
        
        # Create project-specific .gitignore if it doesn't exist
        if (-not (Test-Path ".gitignore")) {
            Copy-Item "../.gitignore" ".gitignore"
            Write-Host "‚úÖ .gitignore copied for $($project.Name)" -ForegroundColor Green
        }
        
        # Add all files to git
        git add .
        
        # Check if there are changes to commit
        $status = git status --porcelain
        if ($status) {
            git commit -m "Initial commit: $($project.Description)"
            Write-Host "‚úÖ Initial commit created for $($project.Name)" -ForegroundColor Green
        } else {
            Write-Host "‚ÑπÔ∏è No changes to commit for $($project.Name)" -ForegroundColor Blue
        }
        
        Pop-Location
    } else {
        Write-Host "‚ö†Ô∏è Project directory $($project.Name) not found!" -ForegroundColor Red
    }
}

# Add and commit main repository
Write-Host "üìù Committing main repository..." -ForegroundColor Yellow
git add .
$status = git status --porcelain
if ($status) {
    git commit -m "Initial commit: Complete SRE Portfolio with 6 production-ready projects

Projects included:
- Prometheus Monitoring Stack (monitoring and alerting)
- Terraform AWS Infrastructure (infrastructure as code) 
- SRE CI/CD Pipeline (reliable deployments)
- Incident Response Toolkit (incident management and chaos engineering)
- Log Aggregation System (centralized logging with ELK)
- Capacity Planning System (AI-powered capacity forecasting)

Each project includes:
- Complete implementation with production-ready code
- Docker and Kubernetes deployment configurations  
- Comprehensive documentation and examples
- Best practices for security and reliability
- Integration with monitoring and alerting systems"

    Write-Host "‚úÖ Main repository committed" -ForegroundColor Green
} else {
    Write-Host "‚ÑπÔ∏è No changes to commit in main repository" -ForegroundColor Blue
}

Write-Host ""
Write-Host "üéâ Git repositories setup completed!" -ForegroundColor Green
Write-Host ""
Write-Host "Next steps to create GitHub repositories:" -ForegroundColor Cyan
Write-Host "1. Create repositories on GitHub (manually or using GitHub CLI)" -ForegroundColor White
Write-Host "2. Add GitHub remotes to each repository" -ForegroundColor White
Write-Host "3. Push all repositories to GitHub" -ForegroundColor White
Write-Host ""
Write-Host "Example commands for main repository:" -ForegroundColor Cyan
Write-Host "git remote add origin https://github.com/yourusername/SRE-Portfolio.git" -ForegroundColor White
Write-Host "git branch -M main" -ForegroundColor White  
Write-Host "git push -u origin main" -ForegroundColor White
Write-Host ""
Write-Host "Example commands for each project:" -ForegroundColor Cyan
Write-Host "cd prometheus-monitoring-stack" -ForegroundColor White
Write-Host "git remote add origin https://github.com/yourusername/prometheus-monitoring-stack.git" -ForegroundColor White
Write-Host "git branch -M main" -ForegroundColor White
Write-Host "git push -u origin main" -ForegroundColor White
Write-Host ""
Write-Host "üìö All projects are ready for GitHub!" -ForegroundColor Green
