name: SRE CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: sre-demo-app
  MONITORING_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # Code Quality and Security Checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.quality-check.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit flake8 black mypy

    - name: Code formatting check
      run: black --check --diff .

    - name: Linting
      run: flake8 . --count --max-complexity=10 --max-line-length=88 --statistics

    - name: Type checking
      run: mypy app.py test_app.py --ignore-missing-imports

    - name: Security scan
      run: |
        bandit -r . -f json -o bandit-report.json --exclude ./venv || true
        echo "Generating dependency list for security review..."
        pip list --format=json > dependencies.json
        echo "âœ… Security scan completed (non-blocking)"

    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-report.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          pytest-report.xml
          htmlcov/
          bandit-report.json
          dependencies.json

    - name: Quality check decision
      id: quality-check
      run: |
        # Check if tests passed and no critical security issues
        if [ -f pytest-report.xml ] && [ $(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('pytest-report.xml'); print(tree.getroot().attrib.get('failures', '0'))") -eq 0 ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "passed=false" >> $GITHUB_OUTPUT
        fi

  # Build and Push Container Images
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should_deploy == 'true'
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: |
        terraform plan -var-file=terraform.tfvars.example -out=tfplan
        terraform show -json tfplan > tfplan.json

    - name: Checkov Infrastructure Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: checkov-report.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-report.sarif

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate, build-and-push, infrastructure-validation]
    if: github.ref == 'refs/heads/develop' && needs.quality-gate.outputs.should_deploy == 'true'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image_tag }}"
        # Add your staging deployment logic here

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh staging
        
    - name: Performance testing
      run: |
        ./scripts/performance-tests.sh staging

    - name: Notify deployment
      if: always()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ðŸš€ Staging deployment completed for commit `${{ github.sha }}`"}' \
          ${{ env.MONITORING_SLACK_WEBHOOK }}

  # Production Deployment with Multiple Strategies
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate, build-and-push, infrastructure-validation]
    if: github.ref == 'refs/heads/main' && needs.quality-gate.outputs.should_deploy == 'true'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Determine deployment strategy
      id: deployment-strategy
      run: |
        if [ "${{ github.event.inputs.deployment_type }}" != "" ]; then
          echo "strategy=${{ github.event.inputs.deployment_type }}" >> $GITHUB_OUTPUT
        else
          echo "strategy=rolling" >> $GITHUB_OUTPUT
        fi

    - name: Rolling Deployment
      if: steps.deployment-strategy.outputs.strategy == 'rolling'
      run: |
        echo "Executing rolling deployment..."
        ./scripts/deploy-rolling.sh ${{ needs.build-and-push.outputs.image_tag }}

    - name: Blue-Green Deployment
      if: steps.deployment-strategy.outputs.strategy == 'blue-green'
      run: |
        echo "Executing blue-green deployment..."
        ./scripts/deploy-blue-green.sh ${{ needs.build-and-push.outputs.image_tag }}

    - name: Canary Deployment
      if: steps.deployment-strategy.outputs.strategy == 'canary'
      run: |
        echo "Executing canary deployment..."
        ./scripts/deploy-canary.sh ${{ needs.build-and-push.outputs.image_tag }}

    - name: Post-deployment validation
      run: |
        echo "Running post-deployment validation..."
        ./scripts/post-deployment-tests.sh production

    - name: Update monitoring dashboards
      run: |
        ./scripts/update-dashboards.sh production ${{ github.sha }}

    - name: Notify successful deployment
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"âœ… Production deployment successful! Version: `${{ github.sha }}` Strategy: `${{ steps.deployment-strategy.outputs.strategy }}`"}' \
          ${{ env.MONITORING_SLACK_WEBHOOK }}

  # Rollback Job
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Execute rollback
      run: |
        echo "Executing emergency rollback..."
        ./scripts/rollback.sh

    - name: Validate rollback
      run: |
        ./scripts/post-deployment-tests.sh production

    - name: Notify rollback
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ðŸ”„ Emergency rollback executed for failed deployment of commit `${{ github.sha }}`"}' \
          ${{ env.MONITORING_SLACK_WEBHOOK }}

  # Security and Compliance
  security-compliance:
    name: Security and Compliance
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: OWASP ZAP Security Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://staging.example.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: SonarQube Quality Gate
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: License compliance check
      run: |
        pip install pip-licenses
        pip-licenses --format=json > licenses.json
        # Check for prohibited licenses
        python scripts/license-checker.py

  # Monitoring and Observability
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: Setup monitoring
      run: |
        echo "Setting up post-deployment monitoring..."
        
    - name: Check SLI/SLO compliance
      run: |
        ./scripts/check-slos.sh production

    - name: Generate deployment metrics
      run: |
        ./scripts/deployment-metrics.sh ${{ github.sha }}

    - name: Update incident response documentation
      run: |
        ./scripts/update-runbooks.sh ${{ github.sha }}

  # Chaos Engineering (Optional)
  chaos-engineering:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && success()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run chaos experiments
      run: |
        echo "Running chaos engineering experiments on staging..."
        ./scripts/chaos-experiments.sh staging

    - name: Validate system resilience
      run: |
        ./scripts/resilience-tests.sh staging
