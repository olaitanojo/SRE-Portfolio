version: '3.8'

services:
  # Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: capacity-influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=capacity_password
      - DOCKER_INFLUXDB_INIT_ORG=capacity-org
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./config/influxdb:/etc/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - capacity-network

  # PostgreSQL for metadata
  postgres:
    image: postgres:15-alpine
    container_name: capacity-postgres
    environment:
      POSTGRES_DB: capacity_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: capacity_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - capacity-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: capacity-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - capacity-network

  # Capacity Planning API
  capacity-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: capacity-api
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=capacity-org
      - INFLUXDB_BUCKET=metrics
      - DATABASE_URL=postgresql://postgres:capacity_password@postgres:5432/capacity_db
      - REDIS_URL=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
    ports:
      - "8000:8000"
    volumes:
      - ./config/gcp-credentials.json:/app/gcp-credentials.json:ro
      - ./config:/app/config:ro
    depends_on:
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - capacity-network

  # Data Collectors
  aws-collector:
    build:
      context: ./collectors
      dockerfile: Dockerfile.aws
    container_name: aws-collector
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGIONS=${AWS_REGIONS:us-east-1,us-west-2}
      - COLLECTION_INTERVAL=${COLLECTION_INTERVAL:300}
    volumes:
      - ./config/aws-collector.yml:/app/config.yml:ro
    depends_on:
      - influxdb
    networks:
      - capacity-network

  gcp-collector:
    build:
      context: ./collectors
      dockerfile: Dockerfile.gcp
    container_name: gcp-collector
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
      - COLLECTION_INTERVAL=${COLLECTION_INTERVAL:300}
    volumes:
      - ./config/gcp-credentials.json:/app/gcp-credentials.json:ro
      - ./config/gcp-collector.yml:/app/config.yml:ro
    depends_on:
      - influxdb
    networks:
      - capacity-network

  # Forecasting Service
  forecasting-service:
    build:
      context: ./forecasting
      dockerfile: Dockerfile
    container_name: forecasting-service
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - DATABASE_URL=postgresql://postgres:capacity_password@postgres:5432/capacity_db
      - REDIS_URL=redis://redis:6379/0
      - MODEL_UPDATE_INTERVAL=${MODEL_UPDATE_INTERVAL:3600}
    ports:
      - "8001:8000"
    volumes:
      - ./config/forecasting.yml:/app/config.yml:ro
      - forecasting_models:/app/models
    depends_on:
      - influxdb
      - postgres
      - redis
    networks:
      - capacity-network

  # Optimization Service
  optimization-service:
    build:
      context: ./optimization
      dockerfile: Dockerfile
    container_name: optimization-service
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - DATABASE_URL=postgresql://postgres:capacity_password@postgres:5432/capacity_db
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8002:8000"
    volumes:
      - ./config/optimization.yml:/app/config.yml:ro
    depends_on:
      - influxdb
      - postgres
    networks:
      - capacity-network

  # Dashboard
  capacity-dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: capacity-dashboard
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_FORECASTING_API_URL=http://localhost:8001
      - REACT_APP_OPTIMIZATION_API_URL=http://localhost:8002
    ports:
      - "3000:3000"
    depends_on:
      - capacity-api
    networks:
      - capacity-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: capacity-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./config/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - influxdb
    networks:
      - capacity-network

  # Prometheus for system monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: capacity-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - capacity-network

  # Jupyter Notebook for ad-hoc analysis
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: capacity-jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=capacity-analysis
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - jupyter_data:/home/jovyan/.jupyter
    networks:
      - capacity-network

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: capacity-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - capacity-network

volumes:
  influxdb_data:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:
  forecasting_models:
  jupyter_data:
  alertmanager_data:

networks:
  capacity-network:
    name: capacity-network
    driver: bridge
