# Incident Response Toolkit Kubernetes Deployment
apiVersion: v1
kind: Namespace
metadata:
  name: incident-response
  labels:
    name: incident-response
---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: incident-response
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "incident_db"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: incident-response
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: incident-response
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: incident-response
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Incident Commander Dashboard
apiVersion: apps/v1
kind: Deployment
metadata:
  name: incident-commander
  namespace: incident-response
spec:
  replicas: 2
  selector:
    matchLabels:
      app: incident-commander
  template:
    metadata:
      labels:
        app: incident-commander
    spec:
      containers:
      - name: incident-commander
        image: incident-commander:latest
        ports:
        - containerPort: 80
        env:
        - name: REACT_APP_API_URL
          value: "http://runbook-engine:8000/api"
        - name: REACT_APP_CHAOS_API_URL
          value: "http://chaos-framework:8000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: incident-commander
  namespace: incident-response
spec:
  selector:
    app: incident-commander
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
# Runbook Engine
apiVersion: apps/v1
kind: Deployment
metadata:
  name: runbook-engine
  namespace: incident-response
spec:
  replicas: 2
  selector:
    matchLabels:
      app: runbook-engine
  template:
    metadata:
      labels:
        app: runbook-engine
    spec:
      serviceAccountName: runbook-engine-sa
      containers:
      - name: runbook-engine
        image: runbook-engine:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: REDIS_URL
          value: "redis://redis:6379/0"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: runbook-engine
  namespace: incident-response
spec:
  selector:
    app: runbook-engine
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Chaos Framework
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaos-framework
  namespace: incident-response
spec:
  replicas: 1  # Only one instance for safety
  selector:
    matchLabels:
      app: chaos-framework
  template:
    metadata:
      labels:
        app: chaos-framework
    spec:
      serviceAccountName: chaos-framework-sa
      containers:
      - name: chaos-framework
        image: chaos-framework:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: GRAFANA_URL
          value: "http://grafana:3000"
        securityContext:
          privileged: true  # Required for some chaos experiments
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 15
---
apiVersion: v1
kind: Service
metadata:
  name: chaos-framework
  namespace: incident-response
spec:
  selector:
    app: chaos-framework
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Service Account for Runbook Engine
apiVersion: v1
kind: ServiceAccount
metadata:
  name: runbook-engine-sa
  namespace: incident-response
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: runbook-engine-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: runbook-engine-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: runbook-engine-role
subjects:
- kind: ServiceAccount
  name: runbook-engine-sa
  namespace: incident-response
---
# Service Account for Chaos Framework
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chaos-framework-sa
  namespace: incident-response
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chaos-framework-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "nodes"]
  verbs: ["get", "list", "watch", "delete", "create", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets"]
  verbs: ["get", "list", "watch", "patch", "update", "delete"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: chaos-framework-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chaos-framework-role
subjects:
- kind: ServiceAccount
  name: chaos-framework-sa
  namespace: incident-response
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: incident-response
type: Opaque
data:
  password: cG9zdGdyZXNfcGFzc3dvcmQ=  # base64 encoded 'postgres_password'
---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: incident-response
type: Opaque
data:
  url: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzX3Bhc3N3b3JkQHBvc3RncmVzOjU0MzIvaW5jaWRlbnRfZGI=  # base64 encoded database URL
---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: incident-response
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: incident-response-ingress
  namespace: incident-response
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - incident-response.your-domain.com
    secretName: incident-response-tls
  rules:
  - host: incident-response.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: incident-commander
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: runbook-engine
            port:
              number: 8000
      - path: /chaos-api
        pathType: Prefix
        backend:
          service:
            name: chaos-framework
            port:
              number: 8000
